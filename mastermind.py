# -*- coding: utf-8 -*-
"""Mastermind_Cass

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bSEq-A7pjk5Nt_9UQ3bpezhHMHKT21Hp
"""

import inquirer
import random
import itertools
import os
import time
import pandas as pd
import matplotlib.pyplot as plt


####################
## Helper
###################

def evaluate_code(code_guessed, secret_code):
    res = []
    for i in range(0, 4):
        for j in range(0, 4):
            if code_guessed[i] == secret_code[j]:
                if i == j:
                    # good color good place
                    res += ['B']
                else:
                    # good color wrong place
                    res += ['W']
    return res


####################
## Players
###################

class Player:
    def __init__(self):
        self.name = input('Give me a name for player: ')
        self.score = 0


class Human(Player):
    player_type = 'Human'

    def give_answer(self, colors, last_guess, last_key):
        answers_list = [
            inquirer.List('colors',
                          message="Choose a color ",
                          choices=["Red", "Blue", "Green", "Pink", "Orange", "Black"],
                          )
        ]
        return [inquirer.prompt(answers_list)['colors'] for i in range(4)]


class AI(Player):  # 3IA : random / dumb / smart
    player_type = 'AI'
    dumb_answer = []
    full_code_list = []
    questions_type = [
        inquirer.List('AI_type',
                      message="Which type of AI do you want ",
                      choices=['Random', 'Dumb', 'Smart'],
                      )
    ]

    def __init__(self):
        super().__init__()

        self.type = inquirer.prompt(self.questions_type)['AI_type']
        print('you have chosen : ' + self.type)

    def give_answer_random(self, colors):
        return random.sample(colors, 4)

    def give_answer_dumb(self, colors):
        if not self.dumb_answer:
            self.dumb_answer = self.give_answer_random(colors)

        return self.dumb_answer

    def give_answer_smart(self, colors, last_guess, last_key):
        # ce n'est pas la meilleure IA Smart mais c'est efficace
        # create the full list of permutations
        if not self.full_code_list:
            self.full_code_list = list(itertools.permutations(colors, 4))
        else:
            full_code_list2 = []
            for i in range(0, len(self.full_code_list)):
                if evaluate_code(last_guess, self.full_code_list[i]) == last_key:
                    full_code_list2 += [self.full_code_list[i]]
            self.full_code_list = full_code_list2
        return random.choice(self.full_code_list)

    def give_answer(self, colors, last_guess, last_key):
        if self.type == 'Random':
            return self.give_answer_random(colors)

        elif self.type == 'Dumb':
            return self.give_answer_dumb(colors)

        else:
            return self.give_answer_smart(colors, last_guess, last_key)


def select_player():
    players_type = [
        inquirer.List('type',
                      message="Which type of Player do you want ",
                      choices=['Human', 'AI'],
                      )]
    player_type = inquirer.prompt(players_type)['type']
    print('you have chosen a(n) : ' + player_type)

    if player_type == 'Human':
        return Human()
    else:
        return AI()


####################
## GAME
###################

class Game_Model():
    colors = ["Red", "Blue", "Green", "Pink", "Orange", "Black"]
    score = 0
    nb_guesses = 0
    max_guesses = 12
    nb_manches = 0
    nb_manches_max = 5  # Dans notre simulation on va imposer ce nombre de manches pour des raisons de rapidité
    last_key = []
    last_guesses = []

    def __init__(self):
        self.secret_code = random.sample(self.colors, 4)
        self.player = select_player()


class Game_View():

    def render_banner(self):
        os.system('cls' if os.name == 'nt' else 'clear')
        print('''
████████████████████████████████████████████████████████████████████████████████████
███╗   ███╗ █████╗ ███████╗████████╗███████╗██████╗ ███╗   ███╗██╗███╗   ██╗██████╗ 
████╗ ████║██╔══██╗██╔════╝╚══██╔══╝██╔════╝██╔══██╗████╗ ████║██║████╗  ██║██╔══██╗
██╔████╔██║███████║███████╗   ██║   █████╗  ██████╔╝██╔████╔██║██║██╔██╗ ██║██║  ██║
██║╚██╔╝██║██╔══██║╚════██║   ██║   ██╔══╝  ██╔══██╗██║╚██╔╝██║██║██║╚██╗██║██║  ██║
██║ ╚═╝ ██║██║  ██║███████║   ██║   ███████╗██║  ██║██║ ╚═╝ ██║██║██║ ╚████║██████╔╝
╚═╝     ╚═╝╚═╝  ╚═╝╚══════╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝     ╚═╝╚═╝╚═╝  ╚═══╝╚═════╝ 
████████████████████████████████████████████████████████████████████████████████████''')

    def render_game(self, player, nb_round, secret, matrix_res, matrix_guessed):
        self.render_banner()

        print('Player is ' + player.player_type + ' and is name is ' + player.name)
        print('Current round is ' + str(nb_round))
        print('████████████████████████████████████████████████████████████████████████████████████')

        line1 = '█████████████████ Secret code to guess is : '
        for j in secret:
            line1 += ' ' + j
        # debug#print(line1)
        print('''████████████████████████████████████████████████████████████████████████████████████
██ B = Good Element at good place
██ W = Good Element but wrong place
██   = Not good
████████████████████████████████████████████████████████████████████████████████████''')

        for i in range(len(matrix_res)):
            mr = matrix_res[i].copy()
            mg = matrix_guessed[i]

            if len(mr) < 4:
                mr += [' ' for i in range(4 - len(mr))]
            s = f"""██ {mr[0]}║{mr[1]} ██
██═════██    {mg[0]} {mg[1]} {mg[2]} {mg[3]}
██ {mr[2]}║{mr[3]} ██
████████████████████████████████████████████████████████████████████████████████████"""
            print(s)

    def restart_game(self, response):
        restart = [
            inquirer.List('response',
                          message="One more try ?",
                          choices=['YES PLEASE', 'Nope, next time'],
                          )]
        restart = inquirer.prompt(restart)['response']
        print('your answer is : ' + restart)

        if restart == 'YES PLEASE':
            return Game_Controller().start_game() 

        elif restart == 'Nope, next time':
            print('''
     ██████╗  ██████╗  ██████╗ ██████╗     ██████╗ ██╗   ██╗███████╗
    ██╔════╝ ██╔═══██╗██╔═══██╗██╔══██╗    ██╔══██╗╚██╗ ██╔╝██╔════╝
    ██║  ███╗██║   ██║██║   ██║██║  ██║    ██████╔╝ ╚████╔╝ █████╗
    ██║   ██║██║   ██║██║   ██║██║  ██║    ██╔══██╗  ╚██╔╝  ██╔══╝
    ╚██████╔╝╚██████╔╝╚██████╔╝██████╔╝    ██████╔╝   ██║   ███████╗
     ╚═════╝  ╚═════╝  ╚═════╝ ╚═════╝     ╚═════╝    ╚═╝   ╚══════╝

    ''')

    def win(self, name, nb_guesses, secret_code):
        os.system('cls' if os.name == 'nt' else 'clear')

        code = ''
        for j in secret_code:
            code += ' ' + j

        print('══════════════════')
        print('Congrats ' + name, 'You won in ' + str(nb_guesses) + ' guesses ! Secret code was ' + code)
        # print('Your current score is :' + str(score))
        print('══════════════════')
        return self.restart_game(self)

    def loose(self, name, secret_code):
        os.system('cls' if os.name == 'nt' else 'clear')

        code = ''
        for j in secret_code:
            code += ' ' + j

        print('══════════════════')
        print('''
  ▄████  ▄▄▄       ███▄ ▄███▓▓█████     ▒█████   ██▒   █▓▓█████  ██▀███  
 ██▒ ▀█▒▒████▄    ▓██▒▀█▀ ██▒▓█   ▀    ▒██▒  ██▒▓██░   █▒▓█   ▀ ▓██ ▒ ██▒
▒██░▄▄▄░▒██  ▀█▄  ▓██    ▓██░▒███      ▒██░  ██▒ ▓██  █▒░▒███   ▓██ ░▄█ ▒
░▓█  ██▓░██▄▄▄▄██ ▒██    ▒██ ▒▓█  ▄    ▒██   ██░  ▒██ █░░▒▓█  ▄ ▒██▀▀█▄  
░▒▓███▀▒ ▓█   ▓██▒▒██▒   ░██▒░▒████▒   ░ ████▓▒░   ▒▀█░  ░▒████▒░██▓ ▒██▒
 ░▒   ▒  ▒▒   ▓▒█░░ ▒░   ░  ░░░ ▒░ ░   ░ ▒░▒░▒░    ░ ▐░  ░░ ▒░ ░░ ▒▓ ░▒▓░
  ░   ░   ▒   ▒▒ ░░  ░      ░ ░ ░  ░     ░ ▒ ▒░    ░ ░░   ░ ░  ░  ░▒ ░ ▒░
░ ░   ░   ░   ▒   ░      ░      ░      ░ ░ ░ ▒       ░░     ░     ░░   ░ 
      ░       ░  ░       ░      ░  ░       ░ ░        ░     ░  ░   ░     
                                                     ░                   
''')
        print('Game Over ' + name, '. Try again. Secret code was' + code)
        print('══════════════════')
        return self.restart_game(self)


class Game_Controller():

    def __init__(self):
        self.view = Game_View()
        self.view.render_banner()
        self.model = Game_Model()
        self.start_game()

    def start_game(self):
        while True:
            self.model.nb_guesses += 1

            if not self.model.last_guesses:
                last_guess = []
                last_key = []
            else:
                last_guess = self.model.last_guesses[-1]
                last_key = self.model.last_key[-1]

            code_guessed = self.model.player.give_answer(self.model.colors, last_guess, last_key)
            key = evaluate_code(code_guessed, self.model.secret_code)
            if key == ["B", "B", "B", "B"]:
                # win
                self.view.win(self.model.player.name, self.model.nb_guesses, self.model.secret_code)
                break
            elif self.model.nb_guesses >= self.model.max_guesses:
                self.view.loose(self.model.player.name, self.model.secret_code)
                break
            else:
                self.model.last_key.append(key)
                print(key, self.model.last_key)
                self.model.last_guesses.append(code_guessed)
                self.view.render_game(self.model.player, self.model.nb_guesses, self.model.secret_code,
                                      self.model.last_key, self.model.last_guesses)
                time.sleep(1.5)



gc = Game_Controller()

nb_games_max = 12
score = 0

if key == ["B", "B", "B", "B"]:
    score = ++1
else:
    pass

print(score)